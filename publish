#!/usr/bin/env bash

##############################################################################
##
##  Publish helper script for linux
##
##  this script will guide through the following workflow, copy javadoc
##  and handle a possible fail of javadoc generation
##
##
##  Publishing workflow
##
##  - Add this to local.properties:
##      bintray.user=eltos
##      bintray.apikey=...
## 
##  - Update version code in build.gradle!
## 
##  - Run
##      $ ./gradlew :testApp:assembleRelease
##
##  - Run
##      $ ./gradlew clean build install
##      This may fail during javadoc generation. However, the javadoc will most likely have been
##      generated in simpledialogfragment/build/docs/javadoc/
##
##  - Run
##      $ ./gradlew install -xjavadoc
##      $ ./gradlew bintrayUpload
##
##############################################################################



# Check for config in local.properties
######################################
if ! grep -q "^bintray.user=" "local.properties" ||
	! grep -q "^bintray.apikey=" "local.properties"; then
	echo -e "\e[31mERROR: These need to be defined in local.properties:\e[0m"
	echo "  bintray.user=eltos"
	echo "  bintray.apikey=***"
	exit 1
fi


# Check for updated version codes
#################################
VN=$(grep "versionName" "simpledialogfragment/build.gradle" | awk '{print $2}' | tr -d '"' | tr -d "'")
VC=$(grep "versionCode" "simpledialogfragment/build.gradle" | awk '{print $2}')
LVN=$(grep "libraryVersion" "simpledialogfragment/build.gradle" | awk '{print $3}' | tr -d '"' | tr -d "'")
AVN=$(grep "versionName" "testApp/build.gradle" | awk '{print $2}' | tr -d '"' | tr -d "'")
AVC=$(grep "versionCode" "testApp/build.gradle" | awk '{print $2}')

echo -e "Library version: \e[33m$LVN\e[0m"
echo -e "Project version: \e[33m$VN\e[0m (\e[33m$VC\e[0m)"
echo -e "TestApp version: \e[33m$AVN\e[0m (\e[33m$AVC\e[0m)"
read -r -p $'Are the version codes up to date? [Y/n] ' OK
if [[ $OK =~ ^[Nn].*$ ]]; then
	echo -e "\e[31mThen please update them!\e[0m"
	exit 1
fi


# Assemble testApp
##################
echo "Assemble testApp..."
APP="testApp/build/outputs/apk/debug/testApp-debug.apk"
rm -f "$APP"
./gradlew :testApp:assembleDebug
if [ -f "$APP" ]; then
	cp -f "$APP" "testApp.apk"
	echo -e "\e[32mtestApp created\e[0m"
else
	echo -e "\e[31mtestApp not created!\e[0m"
	exit 1
fi



# Build
#######
echo "Clean, build and install..."
./gradlew clean build install
BUILD=$?

# Copy javadoc
##############
if [ -d "simpledialogfragment/build/docs/javadoc/" ]; then
	echo -e "\e[32mJavadoc created\e[0m"
	TO="docs/javadoc"
	rm -rf "$TO"
	mkdir -p $TO
	cp -r "simpledialogfragment/build/docs/javadoc/." "$TO"

	# Update README
	sed -i 's/\[API [0-9.]*\]/\[API '"$LVN"'\]/g' docs/README.md
	if ! grep -q "\*\*$LVN\*\*" "docs/README.md"; then
		DATE=`date +%d.%m.%Y`
		echo "| **$LVN** | $DATE |" >> docs/README.md
	fi	

	echo -e "\e[32mJavadoc copied to $TO\e[0m"
else
	echo -e "\e[31mJavadoc not created\e[0m"
fi


# Build
#######
XJAVADOC=0
if [ $BUILD -ne 0 ]; then
	# first build failed, try again without javadoc
	echo "Install again without javadoc..."
	./gradlew install -xjavadoc
	BUILD=$?
	XJAVADOC=1
fi

# Deploy
########
if [ $BUILD -eq 0 ]; then
	read -r -p $'\e[32mBuild "'"$LVN"$'" successful. Upload to bintray? [Y/n]\e[0m ' OK
	if ! [[ $OK =~ ^[Nn].*$ ]]; then
		echo "Upload to bintray"
		if [ $XJAVADOC -ne 0 ]; then
			./gradlew bintrayUpload -xjavadoc
		else
			./gradlew bintrayUpload
		fi
		if [ $? -eq 0 ]; then

			# Update README.md
			sed -i -E "s|v[0-9.]+|v$LVN|" README.md

			echo -e "\e[32mUpload successful :)\e[0m"
			echo "You still need to publish the files uploaded:"
			echo "  https://bintray.com/eltos/simpledialogfragments/SimpleDialogFragment"
			start "https://bintray.com/eltos/simpledialogfragments/SimpleDialogFragment"
			
			# git commit
			read -r -p $'\e[32mGit commit and tag new version as v'"$LVN"$'? [Y/n]\e[0m ' OK
			if ! [[ $OK =~ ^[Nn].*$ ]]; then
				git reset HEAD
				git add **/build.gradle README.md
				echo -e "Release v$LVN\n\nddZZ" > commit_message.tmp
				git commit -t commit_message.tmp
				if [ $? -eq 0 ]; then
					git reset HEAD
					git add docs/
					echo -e "Javadoc v$LVN\n\nddZZ" > commit_message.tmp
					git commit -t commit_message.tmp
					if [ $? -eq 0 ]; then
						git tag "v$LVN"
						
						echo -e "\e[32mCommit successful\e[0m"
						echo "You still need to git push and create a release on github with the testApp.apk attachted:"
						echo "  https://github.com/eltos/SimpleDialogFragments/releases/new?tag=v$LVN&title=Version $LVN"
						start "https://github.com/eltos/SimpleDialogFragments/releases/new?tag=v$LVN&title=Version $LVN&body=%5B%20%21%5BAPI%2014%2B%5D%28https%3A%2F%2Fimg.shields.io%2Fbadge%2FAPI-14%2B-green.svg%29%5D%28https%3A%2F%2Fdeveloper.android.com%2Fabout%2Fdashboards%2Findex.html%23Platform%29%20%5B%21%5BDownload%5D%28https%3A%2F%2Fapi.bintray.com%2Fpackages%2Feltos%2Fsimpledialogfragments%2FSimpleDialogFragment%2Fimages%2Fdownload.svg%3Fversion%3D$LVN%29%5D%28https%3A%2F%2Fbintray.com%2Feltos%2Fsimpledialogfragments%2FSimpleDialogFragment%2F$LVN%29%20%5B%21%5BJitPack%5D%28https%3A%2F%2Fimg.shields.io%2Fbadge%2FJitPack-v$LVN-brightgreen.svg%29%5D%28https%3A%2F%2Fjitpack.io%2F%23eltos%2Fsimpledialogfragments%2Fv$LVN%29%0A%0A%0A%23%23%20JavaDoc%0A%0AAPI%20documentation%20can%20be%20found%20here%3A%20%5Bsimpledialogfragment%20API%5D%28https%3A%2F%2Feltos.github.io%2FSimpleDialogFragments%2Fjavadoc%29%0A%0A%23%23%20Changes%0A-%20...%0A%0A%23%23%20Licence%0A%0ACopyright%202020%20Philipp%20Niedermayer%20%28github.com%2Feltos%29%0A%0ALicenced%20under%20the%20%5BApache%20Licence%202.0%5D%28LICENSE%29%0A"
					fi
				fi
				rm commit_message.tmp
			fi
			
		else
			echo -e "\e[31mUpload failed :(\e[0m"
			exit 1
		fi
	fi
else
	echo -e "\e[31mBUILD FAILED\e[0m"
	exit 1
fi

exit 0


